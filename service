#!/usr/bin/python
import os, sys, re, time, traceback
from hosted import config, node

import mqtt.client as mqtt

# inspired from https://github.com/chaosdorf/freitagsfoo-infobeamer
# based on https://community.info-beamer.com/t/how-to-get-data-from-mqtt/1183/2

def on_message(client, userdata, message):
    try:
        print "Received message", message.payload, "on topic", message.topic

        if "{" in message.payload:
            print "skipping this message, contains json"
            return

        cleanpath = re.sub(r"[^A-Za-z0-9]", "_", message.topic)
        color = message.payload
        
        node.send_raw('root/plugin/colorblock/%s:%s' % (cleanpath, color))
    except:
        print >>sys.stderr, "failed to parse / send mqtt"
        traceback.print_exc()


def main():
    config.restart_on_update()

    # wait until the configuration is non-empty.
    # hosted will restart this process when the configuration changes.
    if not config.mqtt_host.strip():
        print >>sys.stderr, "waiting for a config change"
        while 1: time.sleep(100000)

    client = mqtt.Client(config.mqtt_client_id.strip())

    if config.mqtt_user.strip() != "":
        client.username_pw_set(config.mqtt_user, config.mqtt_password or None)

    client.connect(config.mqtt_host.strip(), int(config.mqtt_port))
    print >>sys.stderr, "mqtt connected"

    client.on_message = on_message
    # FIXME: subscribe to all topics
    client.subscribe('#')
    client.loop_forever()


if __name__ == "__main__":
    try:
        main()
    except:
        traceback.print_exc()
        time.sleep(30)
